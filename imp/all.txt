// deallock 

#include <stdio.h>
#include <stdbool.h>

#define n 5
#define m 3

void calculateNeed(int need[n][m], int max[n][m], int alloc[n][m]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
}

bool isSafe(int avail[m], int max[n][m], int alloc[n][m]) {
    int need[n][m];
    calculateNeed(need, max, alloc);
    bool finish[n] = {false};
    int safeSeq[n];
    int count = 0;

    while (count < n) {
        bool found = false;
        for (int p = 0; p < n; p++) {
            if (!finish[p]) {
                bool canProceed = true;
                for (int j = 0; j < m; j++) {
                    if (need[p][j] > avail[j]) {
                        canProceed = false;
                        break;
                    }
                }
                if (canProceed) {
                    for (int j = 0; j < m; j++) {
                        avail[j] += alloc[p][j];
                    }
                    finish[p] = true;
                    safeSeq[count++] = p;
                    found = true;
                }
            }
        }
        if (!found) {
            printf("The system is not in a safe state.\n");
            return false;
        }
    }

    printf("Following is the SAFE Sequence:\n");
    for (int i = 0; i < n; i++) {
        printf(" P%d", safeSeq[i]);
        if (i < n - 1) printf(" ->");
    }
    printf("\n");
    return true;
}

bool requestResources(int pid, int request[m], int avail[m], int max[n][m], int alloc[n][m]) {
    int need[n][m];
    calculateNeed(need, max, alloc);

    for (int i = 0; i < m; i++) {
        if (request[i] > need[pid][i]) {
            printf("Error: Process has exceeded its maximum claim.\n");
            return false;
        }
    }

    for (int i = 0; i < m; i++) {
        if (request[i] > avail[i]) {
            printf("Resources are not available right now.\n");
            return false;
        }
    }

    for (int i = 0; i < m; i++) {
        avail[i] -= request[i];
        alloc[pid][i] += request[i];
        need[pid][i] -= request[i];
    }

    if (isSafe(avail, max, alloc)) {
        return true;
    } else {
        for (int i = 0; i < m; i++) {
            avail[i] += request[i];
            alloc[pid][i] -= request[i];
            need[pid][i] += request[i];
        }
        printf("Request cannot be granted as it leaves the system in an unsafe state.\n");
        return false;
    }
}

int main() {
    int alloc[n][m] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    int max[n][m] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    int avail[m] = {3, 3, 2};

    isSafe(avail, max, alloc);

    int request[m] = {1, 0, 2};
    int pid = 1;

    if (requestResources(pid, request, avail, max, alloc)) {
        printf("Resources allocated successfully.\n");
    }

    return 0;
}

// mem allo fix

#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_PARTITIONS 5
#define MAX_PROCESSES 4

void firstFit(int partitions[], int n_partitions, int processes[], int n_processes) {
    bool isAllocated[MAX_PARTITIONS] = {false};
    int allocation[MAX_PROCESSES];
    
    for (int i = 0; i < n_processes; i++)
        allocation[i] = -1;
    
    for (int i = 0; i < n_processes; i++) {
        for (int j = 0; j < n_partitions; j++) {
            if (!isAllocated[j] && partitions[j] >= processes[i]) {
                allocation[i] = j;
                isAllocated[j] = true;
                break;
            }
        }
    }
    
    printf("\nFirst Fit Allocation:\n");
    for (int i = 0; i < n_processes; i++) {
        printf("Process %d: ", i + 1);
        if (allocation[i] != -1)
            printf("Allocated to Partition %d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

void bestFit(int partitions[], int n_partitions, int processes[], int n_processes) {
    bool isAllocated[MAX_PARTITIONS] = {false};
    int allocation[MAX_PROCESSES];
    
    for (int i = 0; i < n_processes; i++)
        allocation[i] = -1;
    
    for (int i = 0; i < n_processes; i++) {
        int best_idx = -1;
        int min_diff = INT_MAX;
        
        for (int j = 0; j < n_partitions; j++) {
            if (!isAllocated[j] && partitions[j] >= processes[i]) {
                if (partitions[j] - processes[i] < min_diff) {
                    min_diff = partitions[j] - processes[i];
                    best_idx = j;
                }
            }
        }
        
        if (best_idx != -1) {
            allocation[i] = best_idx;
            isAllocated[best_idx] = true;
        }
    }
    
    printf("\nBest Fit Allocation:\n");
    for (int i = 0; i < n_processes; i++) {
        printf("Process %d: ", i + 1);
        if (allocation[i] != -1)
            printf("Allocated to Partition %d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

void worstFit(int partitions[], int n_partitions, int processes[], int n_processes) {
    bool isAllocated[MAX_PARTITIONS] = {false};
    int allocation[MAX_PROCESSES];
    
    for (int i = 0; i < n_processes; i++)
        allocation[i] = -1;
    
    for (int i = 0; i < n_processes; i++) {
        int worst_idx = -1;
        int max_diff = -1;
        
        for (int j = 0; j < n_partitions; j++) {
            if (!isAllocated[j] && partitions[j] >= processes[i]) {
                if (partitions[j] > max_diff) {
                    max_diff = partitions[j];
                    worst_idx = j;
                }
            }
        }
        
        if (worst_idx != -1) {
            allocation[i] = worst_idx;
            isAllocated[worst_idx] = true;
        }
    }
    
    printf("\nWorst Fit Allocation:\n");
    for (int i = 0; i < n_processes; i++) {
        printf("Process %d: ", i + 1);
        if (allocation[i] != -1)
            printf("Allocated to Partition %d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int partitions[] = {150, 350};
    int processes[] = {300, 25, 125, 50};
    int n_partitions = sizeof(partitions) / sizeof(partitions[0]);
    int n_processes = sizeof(processes) / sizeof(processes[0]);
    
    // First Fit
    firstFit(partitions, n_partitions, processes, n_processes);
    
    // Best Fit
    bestFit(partitions, n_partitions, processes, n_processes);
    
    // Worst Fit
    worstFit(partitions, n_partitions, processes, n_processes);
    
    return 0;
}

// mem allo var 

#include <stdio.h>
#include <limits.h>

#define MAX_PARTITIONS 5
#define MAX_PROCESSES 4

void firstFit(int partitions[], int n_partitions, int processes[], int n_processes) {
    int allocation[MAX_PROCESSES];
    
    // Initialize allocation array with -1
    for (int i = 0; i < n_processes; i++)
        allocation[i] = -1;
    
    // Allocate memory to each process using First Fit
    for (int i = 0; i < n_processes; i++) {
        for (int j = 0; j < n_partitions; j++) {
            if (partitions[j] >= processes[i]) {
                allocation[i] = j;
                partitions[j] -= processes[i];
                break;
            }
        }
    }
    
    // Print allocation results
    printf("\nFirst Fit Allocation:\n");
    for (int i = 0; i < n_processes; i++) {
        printf("Process %d: ", i + 1);
        if (allocation[i] != -1)
            printf("Allocated to Partition %d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

void bestFit(int partitions[], int n_partitions, int processes[], int n_processes) {
    int allocation[MAX_PROCESSES];
    
    // Initialize allocation array with -1
    for (int i = 0; i < n_processes; i++)
        allocation[i] = -1;
    
    // Allocate memory to each process using Best Fit
    for (int i = 0; i < n_processes; i++) {
        int best_idx = -1;
        int min_diff = INT_MAX;
        
        for (int j = 0; j < n_partitions; j++) {
            if (partitions[j] >= processes[i]) {
                if (partitions[j] - processes[i] < min_diff) {
                    min_diff = partitions[j] - processes[i];
                    best_idx = j;
                }
            }
        }
        
        if (best_idx != -1) {
            allocation[i] = best_idx;
            partitions[best_idx] -= processes[i];
        }
    }
    
    // Print allocation results
    printf("\nBest Fit Allocation:\n");
    for (int i = 0; i < n_processes; i++) {
        printf("Process %d: ", i + 1);
        if (allocation[i] != -1)
            printf("Allocated to Partition %d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

void worstFit(int partitions[], int n_partitions, int processes[], int n_processes) {
    int allocation[MAX_PROCESSES];
    
    // Initialize allocation array with -1
    for (int i = 0; i < n_processes; i++)
        allocation[i] = -1;
    
    // Allocate memory to each process using Worst Fit
    for (int i = 0; i < n_processes; i++) {
        int worst_idx = -1;
        int max_diff = -1;
        
        for (int j = 0; j < n_partitions; j++) {
            if (partitions[j] >= processes[i]) {
                if (partitions[j] > max_diff) {
                    max_diff = partitions[j];
                    worst_idx = j;
                }
            }
        }
        
        if (worst_idx != -1) {
            allocation[i] = worst_idx;
            partitions[worst_idx] -= processes[i];
        }
    }
    
    // Print allocation results
    printf("\nWorst Fit Allocation:\n");
    for (int i = 0; i < n_processes; i++) {
        printf("Process %d: ", i + 1);
        if (allocation[i] != -1)
            printf("Allocated to Partition %d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    // int partitions[] = {200, 400, 600, 800, 300, 250};
    // int processes[] = {357, 210, 468, 491};
    int partitions[] = {150, 350};
    int processes[] = {300, 25, 125, 50};
    int n_partitions = sizeof(partitions) / sizeof(partitions[0]);
    int n_processes = sizeof(processes) / sizeof(processes[0]);
    
    int temp_partitions[MAX_PARTITIONS];
    
    // First Fit
    for (int i = 0; i < n_partitions; i++)
        temp_partitions[i] = partitions[i];
    firstFit(temp_partitions, n_partitions, processes, n_processes);
    
    // Best Fit
    for (int i = 0; i < n_partitions; i++)
        temp_partitions[i] = partitions[i];
    bestFit(temp_partitions, n_partitions, processes, n_processes);
    
    // Worst Fit
    for (int i = 0; i < n_partitions; i++)
        temp_partitions[i] = partitions[i];
    worstFit(temp_partitions, n_partitions, processes, n_processes);
    
    return 0;
}


// replacement

#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_FRAMES 10
#define MAX_PAGES 20

bool pageExists(int frames[], int n_frames, int page) {
    for (int i = 0; i < n_frames; i++)
        if (frames[i] == page)
            return true;
    return false;
}

void displayFrames(int frames[], int n_frames) {
    for (int i = 0; i < n_frames; i++) {
        if (frames[i] == -1)
            printf("[ ] ");
        else
            printf("[%d] ", frames[i]);
    }
    printf("\n");
}

void fifo(int pages[], int n_pages, int n_frames) {
    int frames[MAX_FRAMES], current = 0, hits = 0, faults = 0;
    for (int i = 0; i < n_frames; i++) frames[i] = -1;

    printf("\nFIFO Page Replacement:\n");
    for (int i = 0; i < n_pages; i++) {
        printf("Page request %d: ", pages[i]);
        if (!pageExists(frames, n_frames, pages[i])) {
            frames[current] = pages[i];
            current = (current + 1) % n_frames;
            faults++;
            printf("Miss! ");
        } else {
            hits++;
            printf("Hit! ");
        }
        displayFrames(frames, n_frames);
    }
    printf("\nTotal Hits: %d, Misses: %d\n", hits, faults);
}

void lru(int pages[], int n_pages, int n_frames) {
    int frames[MAX_FRAMES], last_used[MAX_FRAMES], hits = 0, faults = 0;
    for (int i = 0; i < n_frames; i++) {
        frames[i] = -1;
        last_used[i] = -1;
    }

    printf("\nLRU Page Replacement:\n");
    for (int i = 0; i < n_pages; i++) {
        printf("Page request %d: ", pages[i]);
        if (!pageExists(frames, n_frames, pages[i])) {
            int lru_idx = 0, min_time = INT_MAX;
            for (int j = 0; j < n_frames; j++) {
                if (frames[j] == -1) {
                    lru_idx = j;
                    break;
                }
                if (last_used[j] < min_time) {
                    min_time = last_used[j];
                    lru_idx = j;
                }
            }
            frames[lru_idx] = pages[i];
            last_used[lru_idx] = i;
            faults++;
            printf("Miss! ");
        } else {
            for (int j = 0; j < n_frames; j++)
                if (frames[j] == pages[i]) last_used[j] = i;
            hits++;
            printf("Hit! ");
        }
        displayFrames(frames, n_frames);
    }
    printf("\nTotal Hits: %d, Misses: %d\n", hits, faults);
}

void optimal(int pages[], int n_pages, int n_frames) {
    int frames[MAX_FRAMES], hits = 0, faults = 0;
    for (int i = 0; i < n_frames; i++) frames[i] = -1;

    printf("\nOptimal Page Replacement:\n");
    for (int i = 0; i < n_pages; i++) {
        printf("Page request %d: ", pages[i]);
        if (!pageExists(frames, n_frames, pages[i])) {
            int replace_idx = -1, farthest = i + 1, future[MAX_FRAMES];
            for (int j = 0; j < n_frames; j++) future[j] = INT_MAX;

            for (int j = 0; j < n_frames; j++) {
                if (frames[j] == -1) {
                    replace_idx = j;
                    break;
                }
                for (int k = i + 1; k < n_pages; k++)
                    if (frames[j] == pages[k]) {
                        future[j] = k;
                        break;
                    }
            }

            if (replace_idx == -1) {
                int max_future = -1;
                for (int j = 0; j < n_frames; j++)
                    if (future[j] > max_future) {
                        max_future = future[j];
                        replace_idx = j;
                    }
            }
            frames[replace_idx] = pages[i];
            faults++;
            printf("Miss! ");
        } else {
            hits++;
            printf("Hit! ");
        }
        displayFrames(frames, n_frames);
    }
    printf("\nTotal Hits: %d, Misses: %d\n", hits, faults);
}

int main() {
    int pages[MAX_PAGES], n_pages, n_frames, choice;
    
    printf("Enter the number of page requests: ");
    scanf("%d", &n_pages);
    printf("Enter the page requests: ");
    for (int i = 0; i < n_pages; i++) scanf("%d", &pages[i]);
    
    printf("Enter the number of frames: ");
    scanf("%d", &n_frames);

    printf("Select algorithm: 1 - FIFO, 2 - LRU, 3 - Optimal, 4 - All: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1: fifo(pages, n_pages, n_frames); break;
        case 2: lru(pages, n_pages, n_frames); break;
        case 3: optimal(pages, n_pages, n_frames); break;
        case 4:
            fifo(pages, n_pages, n_frames);
            lru(pages, n_pages, n_frames);
            optimal(pages, n_pages, n_frames);
            break;
        default: printf("Invalid choice.\n");
    }
    return 0;
}

// scheduling np


#include <stdio.h>
#include <limits.h>
#include <stdlib.h>

struct Process {
    int id;    
    int at;    
    int bt;    
    int pr;    
    int ct;    
    int tat;   
    int wt;    
    int rt;    
};

int compareArrival(const void *a, const void *b) {
    return ((struct Process*)a)->at - ((struct Process*)b)->at;
}

int compareBurst(const void *a, const void *b) {
    return ((struct Process*)a)->bt - ((struct Process*)b)->bt;
}

int comparePriority(const void *a, const void *b) {
    struct Process *p1 = (struct Process *)a;
    struct Process *p2 = (struct Process *)b;
    if (p1->pr == p2->pr) {
        return p1->at - p2->at; 
    }
    return p1->pr - p2->pr; 
}

void displayGanttChart(struct Process p[], int n) {
    printf("\nGantt Chart:\n");
    int t = 0;
    for (int i = 0; i < n; i++) {
        if (t < p[i].at) {
            printf("Idle(%d-%d) ", t, p[i].at);
            t = p[i].at;
        }
        printf("P%d(%d-%d) ", p[i].id, t, t + p[i].bt);
        t += p[i].bt;
    }
    printf("\n");
}

void findFCFS(struct Process p[], int n) {
    qsort(p, n, sizeof(struct Process), compareArrival);
    
    int t = 0; 
    for (int i = 0; i < n; i++) {
        if (t < p[i].at) {
            t = p[i].at;
        }
        p[i].ct = t + p[i].bt; 
        p[i].tat = p[i].ct - p[i].at; 
        p[i].wt = p[i].tat - p[i].bt; 
        p[i].rt = (t == p[i].at) ? 0 : t - p[i].at; 
        t = p[i].ct; 
    }
}

void findSJF(struct Process p[], int n) {
    // qsort(p, n, sizeof(struct Process), compareArrival);

    int t = 0, c = 0; 
    int completed[n];
    for (int i = 0; i < n; i++) completed[i] = 0;
    
    while (c < n) {
        int mi = -1, min_bt = INT_MAX; 
        for (int i = 0; i < n; i++) {
            if (p[i].at <= t && !completed[i] && p[i].bt < min_bt) {
                mi = i; 
                min_bt = p[i].bt; 
            }
        }
        if (mi != -1) {
            p[mi].ct = t + p[mi].bt;
            p[mi].tat = p[mi].ct - p[mi].at; 
            p[mi].wt = p[mi].tat - p[mi].bt; 
            p[mi].rt = (t == p[mi].at) ? 0 : t - p[mi].at; 
            completed[mi] = 1;
            c++; 
            t = p[mi].ct; 
        } else {
            t++;
        }
    }
}

void findPriority(struct Process p[], int n) {

    qsort(p, n, sizeof(struct Process), compareArrival);

    int t = 0, c = 0; 
    int completed[n]; 
    for (int i = 0; i < n; i++) completed[i] = 0; 

    while (c < n) {
        int mi = -1, min_pr = INT_MAX; 
        for (int i = 0; i < n; i++) {
            if (p[i].at <= t && !completed[i] && p[i].pr < min_pr) {
                mi = i; 
                min_pr = p[i].pr; 
            }
        }
        if (mi != -1) { 
            p[mi].ct = t + p[mi].bt; 
            p[mi].tat = p[mi].ct - p[mi].at; 
            p[mi].wt = p[mi].tat - p[mi].bt; 
            p[mi].rt = (t == p[mi].at) ? 0 : t - p[mi].at;
            completed[mi] = 1; 
            c++;
            t = p[mi].ct; 
        } else {
            t++; 
        }
    }
}

void displayProcesses(struct Process p[], int n) {
    printf("ID\tAT\tBT\tPR\tCT\tTAT\tWT\tRT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].id, p[i].at, p[i].bt, p[i].pr, p[i].ct, p[i].tat, p[i].wt, p[i].rt);
    }
}
void calculateAverages(struct Process p[], int n) {
    float total_tat = 0, total_wt = 0, total_rt = 0;
    for (int i = 0; i < n; i++) {
        total_tat += p[i].tat;
        total_wt += p[i].wt;
        total_rt += p[i].rt;
    }
    printf("\nAverage TAT: %.2f, Average WT: %.2f, Average RT: %.2f\n",
           total_tat / n, total_wt / n, total_rt / n);
}

int main() {
    int n, choice;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    struct Process p[n]; 
    for (int i = 0; i < n; i++) {
        p[i].id = i + 1; 
        printf("Enter AT, BT, PR for process %d: ", i + 1);
        scanf("%d %d %d", &p[i].at, &p[i].bt, &p[i].pr); 
    }
    printf("Choose Scheduling Algorithm (1 for FCFS, 2 for SJF, 3 for Priority): ");
    scanf("%d", &choice);

    switch (choice) {
        case 1: findFCFS(p, n); break;          
        case 2: findSJF(p, n); break;         
        case 3: findPriority(p, n); break;     
        default: printf("Invalid choice!\n"); return 1;
    }

    displayProcesses(p, n); 
    calculateAverages(p, n);
    displayGanttChart(p, n);

    return 0; 
}


// scheduling p

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>


struct Process {
    int pid;           
    int arrivalTime;   
    int burstTime;    
    int priority;      
    int remainingTime;  
    int completionTime;
    int turnTime;       
    int waitingTime;    
    int responseTime;  
    int startTime;      
};

struct Queue {
    int items[100];
    int front;
    int rear;
};

void initQueue(struct Queue *q) {
    q->front = -1;
    q->rear = -1;
}

void push(struct Queue *q, int value) {
    if(q->front == -1) q->front = 0;
    q->rear++;
    q->items[q->rear] = value;
}

int pop(struct Queue *q) {
    int value = q->items[q->front];
    q->front++;
    if(q->front > q->rear) {
        q->front = q->rear = -1;
    }
    return value;
}

int isEmpty(struct Queue *q) {
    return (q->front == -1);
}

void calculateAverage(struct Process p[], int n, float *avgTurn, float *avgWaiting, float *avgResponse) {
    *avgTurn = 0;
    *avgWaiting = 0;
    *avgResponse = 0;

    for(int i = 0; i < n; i++) {
        *avgTurn += p[i].turnTime;
        *avgWaiting += p[i].waitingTime;
        *avgResponse += p[i].responseTime;
    }

    *avgTurn /= n;
    *avgWaiting /= n;
    *avgResponse /= n;
}

void displayResults(struct Process p[], int n, const char* algorithm) {
    printf("\n%s Scheduling Results:\n", algorithm);
    printf("Process No.\tPID\tAT\tBT\tStart Time\tCT\tTAT\tWT\tRT\n");
    for(int i = 0; i < n; i++) {
        printf("%d\t\t%d\t%d\t%d\t%d\t\t%d\t%d\t%d\t%d\n",
               i+1, p[i].pid, p[i].arrivalTime, p[i].burstTime, p[i].startTime,
               p[i].completionTime, p[i].turnTime, p[i].waitingTime, p[i].responseTime);
    }

    float avgTurn, avgWaiting, avgResponse;
    calculateAverage(p, n, &avgTurn, &avgWaiting, &avgResponse);

    printf("\nAverage Turnaround Time = %.2f\n", avgTurn);
    printf("Average Waiting Time = %.2f\n", avgWaiting);
    printf("Average Response Time = %.2f\n", avgResponse);
}

void SRTF(struct Process p[], int n) {
    int currentTime = 0;
    int completed = 0;
    int *remainingTime = (int*)malloc(n * sizeof(int));
    int *firstTime = (int*)malloc(n * sizeof(int));

    for(int i = 0; i < n; i++) {
        remainingTime[i] = p[i].burstTime;
        firstTime[i] = 1;
        p[i].responseTime = -1;
    }

    while(completed != n) {
        int minRem = INT_MAX;
        int shortest = -1;

        for(int i = 0; i < n; i++) {
            if(p[i].arrivalTime <= currentTime && remainingTime[i] > 0) {
                if(remainingTime[i] < minRem) {
                    minRem = remainingTime[i];
                    shortest = i;
                }
                if(remainingTime[i] == minRem) {
                    if(p[i].arrivalTime < p[shortest].arrivalTime) {
                        shortest = i;
                    }
                }
            }
        }

        if(shortest != -1) {
            if(firstTime[shortest]) {
                p[shortest].startTime = currentTime;
                p[shortest].responseTime = currentTime - p[shortest].arrivalTime;
                firstTime[shortest] = 0;
            }

            remainingTime[shortest]--;
            currentTime++;

            if(remainingTime[shortest] == 0) {
                completed++;
                p[shortest].completionTime = currentTime;
                p[shortest].turnTime = p[shortest].completionTime - p[shortest].arrivalTime;
                p[shortest].waitingTime = p[shortest].turnTime - p[shortest].burstTime;
            }
        } else {
            currentTime++;
        }
    }

    free(remainingTime);
    free(firstTime);
}

void PriorityPreemptive(struct Process p[], int n) {
    int currentTime = 0;
    int completed = 0;
    int *remainingTime = (int*)malloc(n * sizeof(int));
    int *firstTime = (int*)malloc(n * sizeof(int));

    for(int i = 0; i < n; i++) {
        remainingTime[i] = p[i].burstTime;
        firstTime[i] = 1;
        p[i].responseTime = -1;
    }

    while(completed != n) {
        int highestPriority = INT_MAX;
        int selected = -1;

        for(int i = 0; i < n; i++) {
            if(p[i].arrivalTime <= currentTime && remainingTime[i] > 0) {
                if(p[i].priority < highestPriority) {
                    highestPriority = p[i].priority;
                    selected = i;
                } 
                if(p[i].priority == highestPriority) {
                    if(p[i].arrivalTime < p[selected].arrivalTime) {
                        selected = i;
                    }
                }
            }
        }

        if(selected != -1) {
            if(firstTime[selected]) {
                p[selected].startTime = currentTime;
                p[selected].responseTime = currentTime - p[selected].arrivalTime;
                firstTime[selected] = 0;
            }

            remainingTime[selected]--;
            currentTime++;

            if(remainingTime[selected] == 0) {
                completed++;
                p[selected].completionTime = currentTime;
                p[selected].turnTime = p[selected].completionTime - p[selected].arrivalTime;
                p[selected].waitingTime = p[selected].turnTime - p[selected].burstTime;
            }
        } else {
            currentTime++;
        }
    }

    free(remainingTime);
    free(firstTime);
}

void RoundRobin(struct Process p[], int n, int timeQuantum) {
    struct Queue q;
    initQueue(&q);

    int currentTime = 0;
    int completed = 0;
    int remainingTime[n];
    int mark[n];

    for(int i = 0; i < n; i++) {
        remainingTime[i] = p[i].burstTime;
        p[i].responseTime = -1; 
        mark[i] = 0;
    }

    while(completed != n) {
        for(int i = 0; i < n; i++) {
            if(p[i].arrivalTime <= currentTime && remainingTime[i] > 0 && mark[i] == 0) {
                push(&q, i);
                mark[i] = 1; 
            }
        }

        if (!isEmpty(&q)) {
            int current = pop(&q);
            if(p[current].responseTime == -1) {
                p[current].responseTime = currentTime - p[current].arrivalTime;
                p[current].startTime = currentTime;
            }

            int executionTime = (remainingTime[current] > timeQuantum) ? timeQuantum : remainingTime[current];
            remainingTime[current] -= executionTime;
            currentTime += executionTime;

            for(int i = 0; i < n; i++) {
                if(p[i].arrivalTime <= currentTime && remainingTime[i] > 0 && mark[i] == 0) {
                    push(&q, i);
                    mark[i] = 1;
                }
            }
            if(remainingTime[current] == 0) {
                completed++;
                p[current].completionTime = currentTime;
                p[current].turnTime = p[current].completionTime - p[current].arrivalTime;
                p[current].waitingTime = p[current].turnTime - p[current].burstTime;
            } else {
                push(&q, current); 
            }
        } else {
            currentTime++;
        }
    }
}

int main() {
    int n, choice;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1; 
        printf("Enter Arrival Time, Burst Time, and Priority for process %d: ", i + 1);
        scanf("%d %d %d", &p[i].arrivalTime, &p[i].burstTime, &p[i].priority);
        p[i].remainingTime = p[i].burstTime; 
        p[i].startTime = 0; 
        p[i].completionTime = 0;
        p[i].turnTime = 0; 
        p[i].waitingTime = 0;
        p[i].responseTime = -1;
    }

    printf("Choose Scheduling Algorithm:\n");
    printf("1. Shortest Remaining Time First (SRTF)\n");
    printf("2. Priority Preemptive\n");
    printf("3. Round Robin\n");
    printf("Choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            SRTF(p, n);
            displayResults(p, n, "SRTF");
            break;
        case 2:
            PriorityPreemptive(p, n);
            displayResults(p, n, "Priority Preemptive");
            break;
        case 3: {
            int timeQuantum;
            printf("Enter Time Quantum for Round Robin: ");
            scanf("%d", &timeQuantum);
            RoundRobin(p, n, timeQuantum);
            displayResults(p, n, "Round Robin");
            break;
        }
        default:
            printf("Invalid choice!\n");
            return 1;
    }

    return 0;
}



// thread fork

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void *printOdd(void *param) {
    int n = *((int *)param);
    for (int i = 1; i <= n; i += 2) {
        printf("Thread Odd: %d\n", i);
    }
    pthread_exit(NULL);
}

void *printEven(void *param) {
    int n = *((int *)param);
    for (int i = 2; i <= n; i += 2) {
        printf("Thread Even: %d\n", i);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t odd_thread, even_thread;
    int n = 20; 

    pthread_create(&odd_thread, NULL, printOdd, &n);
    pthread_create(&even_thread, NULL, printEven, &n);

    // Wait for both threads to finish
    pthread_join(odd_thread, NULL);
    pthread_join(even_thread, NULL);

    return 0;
}
 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

void printOdd(int n) {
    for (int i = 1; i <= n; i += 2) {
        printf("Parent Odd: %d\n", i);
    }
}

void printEven(int n) {
    for (int i = 2; i <= n; i += 2) {
        printf("Child Even: %d\n", i);
    }
}

int main() {
    pid_t pid;
    int n = 20; 

    pid = fork();

    if (pid > 0) {
        // Parent process prints odd numbers
        printOdd(n);
        wait(NULL);  
    } 
    else if (pid == 0) {
        // Child process prints even numbers
        printEven(n);
        exit(0); 
    } 
    else {
        // Fork failed
        printf("Fork failed!\n");
        return 1;
    }

    return 0;
}
